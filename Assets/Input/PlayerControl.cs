//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.9.0
//     from Assets/Input/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""Solo"",
            ""id"": ""530f9e27-5ea0-4399-956d-0d97fd528b25"",
            ""actions"": [
                {
                    ""name"": ""Move Action"",
                    ""type"": ""Value"",
                    ""id"": ""9718f1b2-7051-4306-b870-0cd40432911b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AWSD Keys"",
                    ""id"": ""b04f3067-e01a-4b9c-a4c0-97d26eb0de71"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""70c1d35f-b973-4ac2-8b93-66a3771e5848"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eff92955-588b-4743-b875-c9166affd595"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6c027017-25fc-408c-a40c-d202408a92bd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5cd9be9d-6a54-4f7f-8cdf-2f56ea8d79dd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""bf8ffa2f-d58c-41bb-8fad-bffb64780b90"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3c62e36e-c9ac-41c4-b748-9c24d6723193"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bd8ed20d-50ce-4769-a789-56b31615e23e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""239a1b37-dc1d-4f55-9503-1eee1a90571b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fae38a41-d82d-4370-83df-293742efe8d0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d9dc7923-1b2b-4217-9a4d-0a3592ceb04d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad;Mobile"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Multiplayer"",
            ""id"": ""51a98465-8964-4ee6-9151-2b03239310d4"",
            ""actions"": [
                {
                    ""name"": ""Player1 Move Action"",
                    ""type"": ""Value"",
                    ""id"": ""b4971133-35ed-4983-a7a3-bc26ac121d85"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player2 Move Action"",
                    ""type"": ""Value"",
                    ""id"": ""9f3c608d-12c2-4425-9b88-0b59a8c02b8f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AWSD Keys"",
                    ""id"": ""9331635e-d7df-426b-9bae-a9e9c244e5f5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1 Move Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9a43d6ad-ca8d-4ed2-b9d7-36964f6837d7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Player1 Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""387d559f-a9de-4971-b7cd-c26b7f8187d3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Player1 Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b5614da5-c5d8-49f4-96fb-75cd9a0e1233"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Player1 Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""678965b2-277f-419f-92fd-0a0e6fb28f18"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Player1 Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""09fa1845-53b4-4ba2-91d9-87e011cae734"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad;Mobile"",
                    ""action"": ""Player1 Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""77ec664a-d36e-4eba-b374-56e936a10711"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2 Move Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ba794973-5cc0-4d3e-b64b-1d9dc3cb338f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Player2 Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8d15bda2-160d-4be9-8338-eee78260adeb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Player2 Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""53e8b797-d159-4af6-87de-2e3effecd541"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Player2 Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6b9b0c07-204e-487d-8ebe-6a9ecca5af81"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Player2 Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""9a3e81b8-afa6-42c5-a3af-04de0fff3049"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""2b74e8a0-d4d6-427d-8b0a-6e2c27ffc9b8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a0be7f05-00ca-481f-a9c3-6636f52e10d7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Solo
        m_Solo = asset.FindActionMap("Solo", throwIfNotFound: true);
        m_Solo_MoveAction = m_Solo.FindAction("Move Action", throwIfNotFound: true);
        // Multiplayer
        m_Multiplayer = asset.FindActionMap("Multiplayer", throwIfNotFound: true);
        m_Multiplayer_Player1MoveAction = m_Multiplayer.FindAction("Player1 Move Action", throwIfNotFound: true);
        m_Multiplayer_Player2MoveAction = m_Multiplayer.FindAction("Player2 Move Action", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Newaction = m_UI.FindAction("New action", throwIfNotFound: true);
    }

    ~@PlayerControl()
    {
        Debug.Assert(!m_Solo.enabled, "This will cause a leak and performance issues, PlayerControl.Solo.Disable() has not been called.");
        Debug.Assert(!m_Multiplayer.enabled, "This will cause a leak and performance issues, PlayerControl.Multiplayer.Disable() has not been called.");
        Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, PlayerControl.UI.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Solo
    private readonly InputActionMap m_Solo;
    private List<ISoloActions> m_SoloActionsCallbackInterfaces = new List<ISoloActions>();
    private readonly InputAction m_Solo_MoveAction;
    public struct SoloActions
    {
        private @PlayerControl m_Wrapper;
        public SoloActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveAction => m_Wrapper.m_Solo_MoveAction;
        public InputActionMap Get() { return m_Wrapper.m_Solo; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SoloActions set) { return set.Get(); }
        public void AddCallbacks(ISoloActions instance)
        {
            if (instance == null || m_Wrapper.m_SoloActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SoloActionsCallbackInterfaces.Add(instance);
            @MoveAction.started += instance.OnMoveAction;
            @MoveAction.performed += instance.OnMoveAction;
            @MoveAction.canceled += instance.OnMoveAction;
        }

        private void UnregisterCallbacks(ISoloActions instance)
        {
            @MoveAction.started -= instance.OnMoveAction;
            @MoveAction.performed -= instance.OnMoveAction;
            @MoveAction.canceled -= instance.OnMoveAction;
        }

        public void RemoveCallbacks(ISoloActions instance)
        {
            if (m_Wrapper.m_SoloActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISoloActions instance)
        {
            foreach (var item in m_Wrapper.m_SoloActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SoloActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SoloActions @Solo => new SoloActions(this);

    // Multiplayer
    private readonly InputActionMap m_Multiplayer;
    private List<IMultiplayerActions> m_MultiplayerActionsCallbackInterfaces = new List<IMultiplayerActions>();
    private readonly InputAction m_Multiplayer_Player1MoveAction;
    private readonly InputAction m_Multiplayer_Player2MoveAction;
    public struct MultiplayerActions
    {
        private @PlayerControl m_Wrapper;
        public MultiplayerActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player1MoveAction => m_Wrapper.m_Multiplayer_Player1MoveAction;
        public InputAction @Player2MoveAction => m_Wrapper.m_Multiplayer_Player2MoveAction;
        public InputActionMap Get() { return m_Wrapper.m_Multiplayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MultiplayerActions set) { return set.Get(); }
        public void AddCallbacks(IMultiplayerActions instance)
        {
            if (instance == null || m_Wrapper.m_MultiplayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MultiplayerActionsCallbackInterfaces.Add(instance);
            @Player1MoveAction.started += instance.OnPlayer1MoveAction;
            @Player1MoveAction.performed += instance.OnPlayer1MoveAction;
            @Player1MoveAction.canceled += instance.OnPlayer1MoveAction;
            @Player2MoveAction.started += instance.OnPlayer2MoveAction;
            @Player2MoveAction.performed += instance.OnPlayer2MoveAction;
            @Player2MoveAction.canceled += instance.OnPlayer2MoveAction;
        }

        private void UnregisterCallbacks(IMultiplayerActions instance)
        {
            @Player1MoveAction.started -= instance.OnPlayer1MoveAction;
            @Player1MoveAction.performed -= instance.OnPlayer1MoveAction;
            @Player1MoveAction.canceled -= instance.OnPlayer1MoveAction;
            @Player2MoveAction.started -= instance.OnPlayer2MoveAction;
            @Player2MoveAction.performed -= instance.OnPlayer2MoveAction;
            @Player2MoveAction.canceled -= instance.OnPlayer2MoveAction;
        }

        public void RemoveCallbacks(IMultiplayerActions instance)
        {
            if (m_Wrapper.m_MultiplayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMultiplayerActions instance)
        {
            foreach (var item in m_Wrapper.m_MultiplayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MultiplayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MultiplayerActions @Multiplayer => new MultiplayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Newaction;
    public struct UIActions
    {
        private @PlayerControl m_Wrapper;
        public UIActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UI_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface ISoloActions
    {
        void OnMoveAction(InputAction.CallbackContext context);
    }
    public interface IMultiplayerActions
    {
        void OnPlayer1MoveAction(InputAction.CallbackContext context);
        void OnPlayer2MoveAction(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.9.0
//     from Assets/Input/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""Solo Player"",
            ""id"": ""530f9e27-5ea0-4399-956d-0d97fd528b25"",
            ""actions"": [
                {
                    ""name"": ""Move Action"",
                    ""type"": ""Value"",
                    ""id"": ""9718f1b2-7051-4306-b870-0cd40432911b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AWSD Keys"",
                    ""id"": ""b04f3067-e01a-4b9c-a4c0-97d26eb0de71"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""70c1d35f-b973-4ac2-8b93-66a3771e5848"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eff92955-588b-4743-b875-c9166affd595"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6c027017-25fc-408c-a40c-d202408a92bd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5cd9be9d-6a54-4f7f-8cdf-2f56ea8d79dd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""bf8ffa2f-d58c-41bb-8fad-bffb64780b90"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3c62e36e-c9ac-41c4-b748-9c24d6723193"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bd8ed20d-50ce-4769-a789-56b31615e23e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""239a1b37-dc1d-4f55-9503-1eee1a90571b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fae38a41-d82d-4370-83df-293742efe8d0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d9dc7923-1b2b-4217-9a4d-0a3592ceb04d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Multi Player 1"",
            ""id"": ""9bd2873f-acf8-4074-9a7b-587093fe11cf"",
            ""actions"": [
                {
                    ""name"": ""Move Action"",
                    ""type"": ""Value"",
                    ""id"": ""5fc799b2-e5ac-42d2-a8c3-3904920fbfe8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AWSD Keys"",
                    ""id"": ""d5915cc8-b4c2-4132-8658-448effd05512"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6f5fa993-49f1-4917-8656-1c5230e4b50f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""82356737-577b-42ea-9dfe-aa36dc6c564a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a6f32736-1300-4e5b-8726-2a4ca5c160fb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f2290cef-aa0a-4f30-b84a-225ffe348e00"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f84f76bf-c2eb-4a23-89dd-7de84ecee338"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Multi Player 2"",
            ""id"": ""33fca7a6-8948-4c3d-a5ad-8bb6703c1888"",
            ""actions"": [
                {
                    ""name"": ""Move Action"",
                    ""type"": ""Value"",
                    ""id"": ""8caa6b8c-9adb-481f-88b7-1853c271ae72"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""a95f2ba1-62cd-4319-94d5-905787ff6e45"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ad213459-072f-4369-89f2-329903805366"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7c266e6f-0058-407a-bb62-240de20b19e9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8d2f0909-4b01-4647-ac9e-c356feb83337"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f22f8951-eed0-440c-9787-4c25284a14b1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7a09a3e9-76db-4bdf-82ea-474f0a0aa84d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""9a3e81b8-afa6-42c5-a3af-04de0fff3049"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""2b74e8a0-d4d6-427d-8b0a-6e2c27ffc9b8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a0be7f05-00ca-481f-a9c3-6636f52e10d7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Solo Player
        m_SoloPlayer = asset.FindActionMap("Solo Player", throwIfNotFound: true);
        m_SoloPlayer_MoveAction = m_SoloPlayer.FindAction("Move Action", throwIfNotFound: true);
        // Multi Player 1
        m_MultiPlayer1 = asset.FindActionMap("Multi Player 1", throwIfNotFound: true);
        m_MultiPlayer1_MoveAction = m_MultiPlayer1.FindAction("Move Action", throwIfNotFound: true);
        // Multi Player 2
        m_MultiPlayer2 = asset.FindActionMap("Multi Player 2", throwIfNotFound: true);
        m_MultiPlayer2_MoveAction = m_MultiPlayer2.FindAction("Move Action", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Newaction = m_UI.FindAction("New action", throwIfNotFound: true);
    }

    ~@PlayerControl()
    {
        Debug.Assert(!m_SoloPlayer.enabled, "This will cause a leak and performance issues, PlayerControl.SoloPlayer.Disable() has not been called.");
        Debug.Assert(!m_MultiPlayer1.enabled, "This will cause a leak and performance issues, PlayerControl.MultiPlayer1.Disable() has not been called.");
        Debug.Assert(!m_MultiPlayer2.enabled, "This will cause a leak and performance issues, PlayerControl.MultiPlayer2.Disable() has not been called.");
        Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, PlayerControl.UI.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Solo Player
    private readonly InputActionMap m_SoloPlayer;
    private List<ISoloPlayerActions> m_SoloPlayerActionsCallbackInterfaces = new List<ISoloPlayerActions>();
    private readonly InputAction m_SoloPlayer_MoveAction;
    public struct SoloPlayerActions
    {
        private @PlayerControl m_Wrapper;
        public SoloPlayerActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveAction => m_Wrapper.m_SoloPlayer_MoveAction;
        public InputActionMap Get() { return m_Wrapper.m_SoloPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SoloPlayerActions set) { return set.Get(); }
        public void AddCallbacks(ISoloPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_SoloPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SoloPlayerActionsCallbackInterfaces.Add(instance);
            @MoveAction.started += instance.OnMoveAction;
            @MoveAction.performed += instance.OnMoveAction;
            @MoveAction.canceled += instance.OnMoveAction;
        }

        private void UnregisterCallbacks(ISoloPlayerActions instance)
        {
            @MoveAction.started -= instance.OnMoveAction;
            @MoveAction.performed -= instance.OnMoveAction;
            @MoveAction.canceled -= instance.OnMoveAction;
        }

        public void RemoveCallbacks(ISoloPlayerActions instance)
        {
            if (m_Wrapper.m_SoloPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISoloPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_SoloPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SoloPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SoloPlayerActions @SoloPlayer => new SoloPlayerActions(this);

    // Multi Player 1
    private readonly InputActionMap m_MultiPlayer1;
    private List<IMultiPlayer1Actions> m_MultiPlayer1ActionsCallbackInterfaces = new List<IMultiPlayer1Actions>();
    private readonly InputAction m_MultiPlayer1_MoveAction;
    public struct MultiPlayer1Actions
    {
        private @PlayerControl m_Wrapper;
        public MultiPlayer1Actions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveAction => m_Wrapper.m_MultiPlayer1_MoveAction;
        public InputActionMap Get() { return m_Wrapper.m_MultiPlayer1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MultiPlayer1Actions set) { return set.Get(); }
        public void AddCallbacks(IMultiPlayer1Actions instance)
        {
            if (instance == null || m_Wrapper.m_MultiPlayer1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MultiPlayer1ActionsCallbackInterfaces.Add(instance);
            @MoveAction.started += instance.OnMoveAction;
            @MoveAction.performed += instance.OnMoveAction;
            @MoveAction.canceled += instance.OnMoveAction;
        }

        private void UnregisterCallbacks(IMultiPlayer1Actions instance)
        {
            @MoveAction.started -= instance.OnMoveAction;
            @MoveAction.performed -= instance.OnMoveAction;
            @MoveAction.canceled -= instance.OnMoveAction;
        }

        public void RemoveCallbacks(IMultiPlayer1Actions instance)
        {
            if (m_Wrapper.m_MultiPlayer1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMultiPlayer1Actions instance)
        {
            foreach (var item in m_Wrapper.m_MultiPlayer1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MultiPlayer1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MultiPlayer1Actions @MultiPlayer1 => new MultiPlayer1Actions(this);

    // Multi Player 2
    private readonly InputActionMap m_MultiPlayer2;
    private List<IMultiPlayer2Actions> m_MultiPlayer2ActionsCallbackInterfaces = new List<IMultiPlayer2Actions>();
    private readonly InputAction m_MultiPlayer2_MoveAction;
    public struct MultiPlayer2Actions
    {
        private @PlayerControl m_Wrapper;
        public MultiPlayer2Actions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveAction => m_Wrapper.m_MultiPlayer2_MoveAction;
        public InputActionMap Get() { return m_Wrapper.m_MultiPlayer2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MultiPlayer2Actions set) { return set.Get(); }
        public void AddCallbacks(IMultiPlayer2Actions instance)
        {
            if (instance == null || m_Wrapper.m_MultiPlayer2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MultiPlayer2ActionsCallbackInterfaces.Add(instance);
            @MoveAction.started += instance.OnMoveAction;
            @MoveAction.performed += instance.OnMoveAction;
            @MoveAction.canceled += instance.OnMoveAction;
        }

        private void UnregisterCallbacks(IMultiPlayer2Actions instance)
        {
            @MoveAction.started -= instance.OnMoveAction;
            @MoveAction.performed -= instance.OnMoveAction;
            @MoveAction.canceled -= instance.OnMoveAction;
        }

        public void RemoveCallbacks(IMultiPlayer2Actions instance)
        {
            if (m_Wrapper.m_MultiPlayer2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMultiPlayer2Actions instance)
        {
            foreach (var item in m_Wrapper.m_MultiPlayer2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MultiPlayer2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MultiPlayer2Actions @MultiPlayer2 => new MultiPlayer2Actions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Newaction;
    public struct UIActions
    {
        private @PlayerControl m_Wrapper;
        public UIActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UI_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ISoloPlayerActions
    {
        void OnMoveAction(InputAction.CallbackContext context);
    }
    public interface IMultiPlayer1Actions
    {
        void OnMoveAction(InputAction.CallbackContext context);
    }
    public interface IMultiPlayer2Actions
    {
        void OnMoveAction(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
